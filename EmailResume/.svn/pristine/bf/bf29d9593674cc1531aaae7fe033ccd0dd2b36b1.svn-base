package org.emailresume.htmlparser;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.List;
import java.util.Date;

import org.jsoup.*;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.slf4j.helpers.Util;

public class QianChengParser implements Parser{
    static ResumeWrapper rWrapper = null;
    static String fst_job_date_cnt = "";
    static long fst_job_date = 0;
    static String lst_job_date_cnt = "";
    static long lst_job_date = 0;

    public static String ReadResumeContent(String filePath) throws IOException {
        String encoding = "utf-8";
        File file = new File(filePath);
        if (file.isFile() && file.exists()) { // 判断文件是否存在
            InputStreamReader read = new InputStreamReader(new FileInputStream(file), encoding);// 考虑到编码格式
            BufferedReader bufferedReader = new BufferedReader(read);
            String lineTxt;
            StringBuffer sb = new StringBuffer();
            while ((lineTxt = bufferedReader.readLine()) != null) {
                sb.append(lineTxt);
            }
            read.close();
            return sb.toString();
        }
        return "";
    }


    public static String GetNumFromString(String str) {      //返回字符串中的所有数字
        String regEx = "[^0-9]";              //匹配非数字字符
        Pattern p = Pattern.compile(regEx);
        Matcher m = p.matcher(str);
        if (m.find()){
            return m.replaceAll("").trim();        //这里replaceAll是将非数字字符转成空，trim作用是删除字符串首尾的空格
        }else{
            return "";
        }
    }

    public static String GetGenderFromString(String str) { // 从字符串中抽出性别
        String gender;
        Pattern p = Pattern.compile("\\|.*\\|");
        Matcher m = p.matcher(str);
        if (m.find()) {
            gender = m.group().substring(1, 3);
        } else {
            gender = "";
        }
        return gender;
    }

    public static String GetBirthdayFromString(String str) { // 从字符串中抽出生日
        String birthday;
        Pattern p = Pattern.compile("\\(.*\\)");
        Matcher m = p.matcher(str);
        if (m.find()) {
            birthday = m.group().substring(1, m.group().length() - 1);
            if(birthday.charAt(6) == '月'){
                birthday = birthday.substring(0,5)+'0'+birthday.substring(5);
            }
            if(birthday.charAt(9) == '日'){
                birthday = birthday.substring(0,8) + '0' + birthday.substring(8);
            }
        } else {
            birthday = "";
        }
        return birthday;
    }

    public static List GetWorkInfoFromString(String str) { // 抽取出一份工作经历的一些信息，包括入职时间、离职时间、公司名字、公司性质等
        String stime;
        String etime = "";
        String company = "";
        String company_type = "";
        Pattern p = Pattern.compile(".*--");
        Matcher m = p.matcher(str);
        if (m.find()) {
            stime = m.group().substring(0, m.group().length() - 2);
        } else {
            stime = "";
        }
        Pattern p1 = Pattern.compile("--.*：");
        Matcher m1 = p1.matcher(str);
        if (m1.find()) {
            etime = m1.group().substring(2, m1.group().length() - 1);
        }
        Pattern p2 = Pattern.compile("：.*\\(");
        Matcher m2 = p2.matcher(str);
        if (m2.find()) {
            company = m2.group().substring(1, m2.group().length() - 1);
        }
        Pattern p3 = Pattern.compile("\\(.*\\)");
        Matcher m3 = p3.matcher(str);
        if (m3.find()) {
            company_type = m3.group().substring(1, m3.group().length() - 1);
        }
        List<String> list = new ArrayList<String>();
        list.add(stime);
        list.add(etime);
        list.add(company);
        list.add(company_type);
        return list;
    }

    public static long TransStringToTimeStamp(String str) throws ParseException {    //将"201308"或者"20120912"这种类型的字符串转成时间戳
        if (str.length() > 0) {
            if (str.length() == 6) {
                str = str + "01";
            }
            SimpleDateFormat format = new SimpleDateFormat("yyyyMMdd");
            Date date = format.parse(str);
            return date.getTime() / 1000;
        }else{
            return 0;
        }
    }

    public static void GetResumeInfo(Document doc) throws ParseException { // 从document中抽取出简历信息
        String name;
        String gender;
        String birthday;
        String live_city;
        String phone;
        String email;
        String self_assessment;
        String hukou_cnt;
        int hukou;
        long birthdaytimestamp;
        name = doc.select("strong").first().text();
        String info = doc.select("span.blue1").first().text();
        gender = GetGenderFromString(info);
        birthday = GetBirthdayFromString(info);
        birthdaytimestamp = TransStringToTimeStamp(GetNumFromString(birthday));
        live_city = doc.select("span.blue1").parents().parents().parents().select("tr").get(1).select("td").get(1).text();
        String [] cityList= live_city.split("-");
        for(String city: cityList){
            rWrapper.getResume_info().setCur_city_id(Utils.getCityCodeFromString(city));
        }
        if(doc.select("span.blue1").parents().parents().parents().select("tr").get(1).select("td").size() > 3){
            hukou_cnt =  doc.select("span.blue1").parents().parents().parents().select("tr").get(1).select("td").get(3).text();
            hukou = Utils.getCityCodeFromString(hukou_cnt);
            rWrapper.getResume_info().setHukou_cnt(hukou_cnt);
            rWrapper.getResume_info().setHukou(hukou);
        }
        phone = doc.select("span.blue1").parents().parents().parents().select("tr").get(2).select("td").get(1).text();
        phone = GetNumFromString(phone);
        email = doc.select("span.blue1").parents().parents().parents().select("tr").get(3).select("td").get(1).text();
        if(doc.select("table[width=97%]").size() > 3 && doc.select("table[width=97%]").get(3).select("tr").size() > 1){
                self_assessment = doc.select("table[width=97%]").get(3).select("tr").get(1).text();
        }else{
            self_assessment = "";
        }

        rWrapper.getResume_info().setName(name);
        rWrapper.getResume_info().setFst_job_date_cnt(fst_job_date_cnt);
        rWrapper.getResume_info().setFst_job_date(fst_job_date);
        rWrapper.getResume_info().setLst_job_date_cnt(lst_job_date_cnt);
        rWrapper.getResume_info().setLst_job_date(lst_job_date);
        rWrapper.getResume_info().setGender(Utils.getGenderCodeFromString(gender));
        rWrapper.getResume_info().setGender_cnt(gender);
        rWrapper.getResume_info().setBirthday_cnt(birthday);
        rWrapper.getResume_info().setBirthday(birthdaytimestamp);
        rWrapper.getResume_info().setMobilephone(phone);
        rWrapper.getResume_info().setEmail(email);
        rWrapper.getResume_info().setCur_city_cnt(live_city);
        ResumeWrapper.TResume_info.TSelf_assessment tSelf_assessment = new ResumeWrapper.TResume_info.TSelf_assessment();
        tSelf_assessment.setContent_type("自我评价");
        tSelf_assessment.setContent(self_assessment);
        rWrapper.getResume_info().getSelf_assessment().add(tSelf_assessment);
    }

    public static void GetJobIntention(Document doc) { // 从document中抽取出求职意向
        String city;
        String salary = "";
        String state = "";
        String job;
        String job_nature = "";
        String arrival_time = "";
        String resumeId;
        String trade;
        List<String> city_list = new ArrayList<String>();
        List<String> cityId_list = new ArrayList<String>();
        List<String> job_list = new ArrayList<String>();
        List<String> jobId_list = new ArrayList<String>();
        List<String> trade_cnt_list = new ArrayList<String>();
        List<String> trade_list = new ArrayList<String>();
        if (doc.select("table[width=97%]").size() >= 5) {
            Element jobintention = doc.select("table[width=97%]").get(4);
            int size = jobintention.select("tr").size();
            for (int i = 1; i < size - 1; i++) {
                if (jobintention.select("tr").get(i).select("td").size() > 0) {
                    String attr = jobintention.select("tr").get(i).select("td").get(0).text();
                    if (attr.equals("到岗时间：")) {
                        arrival_time = jobintention.select("tr").get(i).select("td").get(1).text();
                    } else if (attr.equals("工作性质：")) {
                        job_nature = jobintention.select("tr").get(i).select("td").get(1).text();
                    } else if (attr.equals("希望行业：")) {
                        trade = jobintention.select("tr").get(i).select("td").get(1).text();
                        String [] trade1 = trade.split(",");
                        for(String tra: trade1){
                            trade_cnt_list.add(tra);
                            trade_list.add(Utils.getJobTradeCodeFromString(tra));
                        }
                    } else if (attr.equals("目标地点：")) {
                        city = jobintention.select("tr").get(i).select("td").get(1).text();
                        String[] ss = city.split(",");
                        for(String s : ss){
                            city_list.add(s);
                            cityId_list.add(Utils.getCityCodeFromString(s).toString());
                        }
                    } else if (attr.equals("期望薪资：")) {
                        salary = jobintention.select("tr").get(i).select("td").get(1).text();
                    } else if (attr.equals("求职状态：")) {
                        state = jobintention.select("tr").get(i).select("td").get(1).text();
                    } else if (attr.equals("目标职能：")) {
                        job = jobintention.select("tr").get(i).select("td").get(1).text();
                        if(job.split(",").length>1){
                            for(int j=0; j<job.split(",").length; j++){
                                job_list.add(job.split(",")[j]);
                                jobId_list.add(Utils.getJobCodeFromString(job.split(",")[j]));
                            }
                        } else{
                            job_list.add(job);
                            jobId_list.add(Utils.getJobCodeFromString(job));
                        }
                    }
                }
            }
            resumeId = doc.select("span.blue1").parents().parents().select("td").get(1).select("p").text();   //获取resumeId
            resumeId = GetNumFromString(resumeId);
            ResumeWrapper.TDeliver_info.TJob_intension jobIntension= new ResumeWrapper.TDeliver_info.TJob_intension();
            jobIntension.setCity_cnt(city_list);
            jobIntension.setCity(cityId_list);
            jobIntension.setArrival_time(arrival_time);
            jobIntension.setJob_nature_cnt(job_nature);
            jobIntension.setJob_nature(Utils.getJobNatureCodeFromString(job_nature));
            jobIntension.setJob_cnt(job_list);
            jobIntension.setJob(jobId_list);
            jobIntension.setState_cnt(state);
            jobIntension.setTrade(trade_list);
            jobIntension.setHope_salary_cnt(salary);
            jobIntension.setTrade_cnt(trade_cnt_list);
            ResumeWrapper.TDeliver_info deliverInfo = new ResumeWrapper.TDeliver_info();
            deliverInfo.setJob_intension(jobIntension);
            deliverInfo.setSrid(resumeId);
            deliverInfo.setSid(2);
            rWrapper.getDeliver_info().add(deliverInfo);
        }
    }

    public static void GetWorkExperience(Document doc) throws ParseException { // 从document中抽取出工作经历
        String stime;
        String etime;
        String stime_p;    //该变量作用只是用于传递值
        String etime_p;
        String time_cnt;   // 工作时间原文
        String company;
        String company_type;
        String location = "";
        String department; // 部门
        String trade = "";
        String job;
        String job_description = "";
        String report_to = ""; // 汇报对象
        String work_content;
        if (doc.select("table[width=97%]").size() >= 6) {
            Elements workexper = doc.select("table[width=97%]").get(5).select("tr").get(1).select("td").get(0).select("tr");
            int tr_num = workexper.size();
            int work_num = 0;
            for (int j = 0; j < tr_num; j++) {
                if (workexper.get(j).text().contains("职位名称")) {
                    work_num ++;
                }
            }
            int r = 1;
            for (int j = 0; j < tr_num; j++) {
                if (workexper.get(j).text().contains("职位名称")) {
                    String row1 = workexper.get(j - 1).text();
                    stime = (String) GetWorkInfoFromString(row1).get(0);
                    stime_p = GetNumFromString(stime);
                    if (stime_p.length() == 5) {
                        stime_p = stime.substring(0, 4) + "0" + stime_p.substring(4);
                    }
                    long stimestamp = 0;
                    stimestamp = TransStringToTimeStamp(stime_p);
                    if (r == work_num){
                        fst_job_date_cnt = stime;
                        fst_job_date = stimestamp;
                    }
                    etime = (String) GetWorkInfoFromString(row1).get(1);
                    etime_p = GetNumFromString(etime);
                    if (etime_p.length() == 5) {
                        etime_p = etime_p.substring(0, 4) + "0" + etime_p.substring(4);
                    }
                    long etimestamp = 0;
                    if (etime_p.length() == 6) {
                        etimestamp = TransStringToTimeStamp(etime_p);
                    }
                    if (r == 1){
                        lst_job_date_cnt = etime;
                        lst_job_date = etimestamp;
                    }
                    r++;
                    company = row1.split(" ")[2].substring(3);
                    company_type = row1.split(" ")[3];
                    String row2 = workexper.get(j).text();
                    job = row2.split(" ")[0].substring(5);
                    department = row2.split(" ")[1].substring(3);
                    String row3 = "";
                    if (workexper.size() > (j + 1)) {
                        row3 = workexper.get(j + 1).text();
                        trade = row3.substring(3);
                    }
                    String row4 = "";
                    if (workexper.size() > (j + 2)) {
                        row4 = workexper.get(j + 2).text();
                        job_description = row4;
                    }
                    String row5 = "";
                    if (workexper.size() > (j + 3)) {
                        if (workexper.get(j + 3).select("p").size() > 1) {
                            report_to = workexper.get(j + 3).select("p").get(0).text();
                        }
                    }
                    time_cnt = stime + "--" + etime;
                    work_content = row1 + row2 +row3 + row4 + row5;
                    ResumeWrapper.TResume_info.TWork tWork= new ResumeWrapper.TResume_info.TWork();
                    tWork.setStime(stimestamp);
                    tWork.setEtime(etimestamp);
                    tWork.setTime_cnt(time_cnt);
                    tWork.setCompany(company);
                    tWork.setCompany_type_cnt(company_type);
                    tWork.setLocation(location);
                    tWork.setDepartment(department);
                    tWork.setTrade_cnt(trade);
                    tWork.setTrade(Utils.getJobTradeCodeFromString(trade));
                    tWork.setJob(job);
                    tWork.setJob_description(job_description);
                    tWork.setReport_to(report_to);
                    rWrapper.getResume_info().getWork().add(tWork);
                    ResumeWrapper.TResume_info.TWork_cnt tWork_cnt = new ResumeWrapper.TResume_info.TWork_cnt();
                    tWork_cnt.setContent(work_content);
                    rWrapper.getResume_info().getWork_cnt().add(tWork_cnt);
                }
            }
        }
    }

    public static void GetEducationExperience(Document doc) throws ParseException { // 从document中抽取出教育经历
        String stime;
        String etime;
        String time_cnt;
        String school;
        String speciality;
        String degree_cnt;
        String description = "";
        if (doc.select("table[width=97%]").size() > 5) {
            Elements education = doc.select("table[width=97%]").get(5).select("tr");
            for (int j = 0; j < education.size(); j++) {
                if (education.get(j).text().contains("教育经历")) {
                    stime = education.get(j + 1).select("tr").get(0).select("td").get(0).text().substring(0, 7);
                    etime = education.get(j + 1).select("tr").get(0).select("td").get(0).text().substring(9, 17);
                    stime = GetNumFromString(stime);
                    if (stime.length() == 5) {
                        stime = stime.substring(0, 4) + "0" + stime.substring(4);
                    }
                    long stimestamp;
                    stimestamp = TransStringToTimeStamp(stime);
                    etime = GetNumFromString(etime);
                    if (etime.length() == 5) {
                        etime = etime.substring(0, 4) + "0" + etime.substring(4);
                    }
                    long etimestamp;
                    etimestamp = TransStringToTimeStamp(etime);
                    time_cnt = education.get(j + 1).select("tr").get(0).select("td").get(1).text(); // 教育时间原文
                    school = education.get(j + 1).select("tr").get(0).select("td").get(2).text(); // 学校
                    speciality = education.get(j + 1).select("tr").get(0).select("td").get(3).text(); // 专业
                    degree_cnt = education.get(j + 1).select("tr").get(0).select("td").get(4).text(); // 学历
                    ResumeWrapper.TResume_info.TEducation tEducation= new ResumeWrapper.TResume_info.TEducation();
                    tEducation.setStime(stimestamp);
                    tEducation.setEtime(etimestamp);
                    tEducation.setTime_cnt(time_cnt);
                    tEducation.setSchool(school);
                    tEducation.setSpeciality(speciality);
                    tEducation.setBackgd_cnt(degree_cnt);        //学历放在Backgd_cnt
                    tEducation.setBackgd(Utils.getBackgdCodeFromString(degree_cnt).toString());
                    tEducation.setDescription(description);
                    rWrapper.getResume_info().getEducation().add(tEducation);
                }
            }
        }
    }

    public  boolean parse(String htmlContent, ResumeWrapper resume) {
        try{
            rWrapper = resume;
            Document doc = Jsoup.parse(htmlContent);
            parseHtml(doc);
        }catch(Exception e){
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public static void parseHtml(Document doc) throws ParseException {

        // 获取求职意向
        GetJobIntention(doc);

        // 获取工作经历
        GetWorkExperience(doc);

        // 获得教育经历
        GetEducationExperience(doc);

        // 获取简历信息
        GetResumeInfo(doc);


    }
}
