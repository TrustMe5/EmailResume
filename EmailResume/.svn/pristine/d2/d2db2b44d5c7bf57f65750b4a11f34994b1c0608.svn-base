package org.emailresume.common;

import com.sun.mail.pop3.POP3Folder;
import com.sun.mail.pop3.POP3Store;
import org.apache.commons.mail.util.MimeMessageParser;

import javax.mail.AuthenticationFailedException;
import javax.mail.Folder;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.internet.MimeMessage;
import java.net.ConnectException;
import java.net.UnknownHostException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Properties;
import java.util.List;
import java.util.ArrayList;

public class POP3Worker {

    class CustomMessageException extends Exception{
        CustomMessageException(String message){
            super(message);
        }
    }

    private POP3Store m_store = null;
    private POP3Folder m_folder = null;
    final private static int m_minEmailCount = 50;

    private String m_errorMessage;
    private String m_exceptionMessage;
    private String m_errorCode;

    public String getErrorCode() {
        return m_errorCode;
    }

    public String getExceptionMessage() {
        return m_exceptionMessage;
    }

    public String getErrorMessage(){
        return m_errorMessage;
    }

    public POP3Store getStore(){
        return m_store;
    }

    public POP3Folder getFolder() throws MessagingException{
        if(m_folder == null){
            m_folder = (POP3Folder) m_store.getFolder("INBOX");
            m_folder.open(Folder.READ_ONLY);
        }
        return m_folder;
    }

    private String getHostFromEmail(String email){
        String suffix = email.split("@")[1];
        if(suffix.equals("sina.com") || suffix.equals("sina.cn") || suffix.equals("vip.sina.com") ||
                suffix.equals("sohu.com") || suffix.equals("live.com") || suffix.equals("263.net")){
            return "pop3." + suffix;
        }

        return "pop." + suffix;
    }

    public boolean connect(String username, String password, String host){
        boolean result = false;
        try {
            EmailInfo info = new EmailInfo();
            info.m_username = username;
            info.m_password = password;
            //info.getServerInfo(username.split("@")[1]);
            String protocol = "pop3";

            String finalHost = host;
            if(host.equals("")){
                finalHost = getHostFromEmail(username);
            }

            Properties props = new Properties();
            props.put("mail.pop3.ssl.enable", false);
            props.put("mail.pop3.host", finalHost);
            props.put("mail.pop3.port", 110);

            if(username.endsWith("qq.com")){
                props.put("mail.pop3.ssl.enable", true);
                props.put("mail.pop3.port", 995);
            }

            Session session = Session.getInstance(props);
            //session.setDebug(true);
            m_store = (POP3Store) session.getStore(protocol);
            m_store.connect(username, password);
            result = true;
        } catch (AuthenticationFailedException e){
            String errorString = e.getMessage();
            m_exceptionMessage = e.getMessage();
            if(errorString.endsWith("authorization failed")){
                m_errorMessage = "账号或密码错误，或者登录网页版邮箱开启POP3协议";
                m_errorCode = "03";
            }else{
                m_errorMessage = "账号或密码错误";
                m_errorCode = "01";
            }
        } catch (MessagingException e){
            m_exceptionMessage = e.getMessage();
            Exception nextException = e.getNextException();
            if(nextException instanceof UnknownHostException){
                m_errorMessage = "无法识别邮箱服务器";
                m_errorCode = "05";

                if(host.equals("")){
                    //如果没有传入host，服务器无法识别，尝试使用企业邮箱服务器登陆
                    for(String h : getCachedHost()){
                        try{
                            Properties props = new Properties();
                            props.put("mail.pop3.ssl.enable", false);
                            props.put("mail.pop3.host", h);
                            props.put("mail.pop3.port", 110);

                            Session session = Session.getInstance(props);
                            m_store = (POP3Store) session.getStore("pop3");
                            m_store.connect(username, password);
                            result = true;
                            break;
                        }catch (Exception ex){
                            //ex.printStackTrace();
                        }
                    }
                }

            }else if(nextException instanceof ConnectException){
                m_errorMessage = "连接对方的服务器失败，建议登录其他邮箱";
                m_errorCode = "02";
            }else{
                m_errorMessage = "账号或密码错误，或者需要登录网页版邮箱开启POP3协议";
                m_errorCode = "03";
            }
        } catch (Exception e){
            m_exceptionMessage = e.getMessage();
            m_errorMessage = "账号或密码错误，或者需要登录网页版邮箱开启POP3协议";
            m_errorCode = "03";
        }
        return result;
    }

    //查看7天内的邮件是否有50封是简历
    public boolean verify(){
        boolean result = false;
        m_errorMessage = "验证失败";
        m_errorCode = "04";

        try {
            if(m_store == null){
                throw new CustomMessageException("验证邮箱失败，获取邮件Store失败");
            }
            POP3Folder folder = (POP3Folder) m_store.getFolder("INBOX");
            if(folder == null){
                throw new CustomMessageException("验证邮箱失败，获取Inbox Folder失败");
            }
            Calendar cal = Calendar.getInstance();
            cal.add(Calendar.DATE, -7);
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            Long time = format.parse(format.format(cal.getTime())).getTime() / 1000;

            folder.open(Folder.READ_ONLY);
            int count = 0;
            int size = folder.getMessageCount();
            for(int i = size; i > 0; i--){
                MimeMessage msg = (MimeMessage) folder.getMessage(i);
                Long sendTime = msg.getSentDate().getTime() / 1000;
                if(sendTime < time){
                    break;
                }
                MimeMessageParser parser = new MimeMessageParser(msg);
                String subject = parser.getSubject();
                String from = parser.getFrom();
                if(Utils.isEmailResume(subject, from)){
                    count++;
                    if(count >= m_minEmailCount){
                        m_errorMessage = "验证成功";
                        m_errorCode = "1";
                        result = true;
                        break;
                    }
                }
            }
        }catch (CustomMessageException e){
            m_errorMessage = e.getMessage();
            m_exceptionMessage = e.getMessage();
            m_errorCode = "04";
        } catch (Exception e){
            m_errorMessage = "验证失败";
            m_exceptionMessage = e.getMessage();
            m_errorCode = "04";
        }

        return result;
    }

    public void clean(){
        try {
            if(m_store != null)
                m_store.close();
            if(m_folder != null)
                m_store.close();
        }catch (Exception e){
            e.printStackTrace();
        }
    }

    private List<String> getCachedHost(){
        ArrayList<String> list = new ArrayList<String>();
        //阿里企业邮
        list.add("pop.alibaba.com");
        list.add("pop.exmail.qq.com");

        return list;
    }
}
