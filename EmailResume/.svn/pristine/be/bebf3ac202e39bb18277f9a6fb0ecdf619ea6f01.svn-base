package org.emailresume.htmlparser;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.emailresume.common.TransferStringToTimeStamp;
import org.jsoup.*;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
/**
 * Created by Administrator on 2016/9/27 0027.
 */
public class QianChengParser_2 implements Parser {
    private static final org.apache.log4j.Logger logger = org.apache.log4j.Logger.getLogger(QianChengParser.class);
    static ResumeWrapper rWrapper = null;
    static String fst_job_date_cnt = "";
    static long fst_job_date = 0;
    static String lst_job_date_cnt = "";
    static long lst_job_date = 0;

    public static String ReadResumeContent(String filePath) throws IOException {
        String encoding = "utf-8";
        File file = new File(filePath);
        if (file.isFile() && file.exists()) { // 判断文件是否存在
            InputStreamReader read = new InputStreamReader(new FileInputStream(file), encoding);// 考虑到编码格式
            BufferedReader bufferedReader = new BufferedReader(read);
            String lineTxt;
            StringBuffer sb = new StringBuffer();
            while ((lineTxt = bufferedReader.readLine()) != null) {
                sb.append(lineTxt);
            }
            read.close();
            return sb.toString();
        }
        return "";
    }

    private static String GetNumFromString(String str) {
        str=str.trim();
        String str2="";
        if(str != null && !"".equals(str)){
            for(int i=0;i<str.length();i++){
                if(str.charAt(i)>=48 && str.charAt(i)<=57){
                    str2+=str.charAt(i);
                }
            }
        }
        return str2;
    }

    private static void getResumeInfo(Document doc) throws ParseException { // 从document中抽取出简历信息
        String name;
        String gender;
        String birthday;
        String age;
        String live_city = "";
        String phone = "";
        String email = "";

        String marriage_cnt;
        String hukou_cnt;
        String resumeId = "";
        String backgd;
        int hukou;
        long birthdaytimestamp;
        Elements tag_pic = doc.select("img[alt = 头像]");
        Element strong = tag_pic.get(0).parent().nextElementSibling().select("strong").get(0);
        name = strong.text();

        String [] row = strong.parent().text().replace("\u00a0"," ").split("\\|");
        gender = row[1];
        age = row[2];
        Element tag_id = doc.select("td[align = right]").get(1);
        if(tag_id.text().contains("ID:")){
            resumeId = tag_id.text().substring(3);
        }
        birthday = Integer.toString(2016 - Integer.parseInt(GetNumFromString(age))) + "." + String.valueOf((int) (Math.random() * 12) + 1) + "." + String.valueOf((int) (Math.random() * 30) + 1);
        birthdaytimestamp = TransferStringToTimeStamp.transferStringToTimeStamp(birthday);
        Elements td = doc.select("td");
        for(int i=0; i<td.size(); i++){
            if(td.get(i).text().equals("手机：") && td.get(i).nextElementSibling() != null){
                phone = td.get(i).nextElementSibling().text();
            }
            if(td.get(i).text().equals("邮箱：") && td.get(i).nextElementSibling() != null){
                email = td.get(i).nextElementSibling().text();
            }
            if(td.get(i).text().equals("居住地：") && td.get(i).nextElementSibling() != null){
                live_city = td.get(i).nextElementSibling().text();
            }
            if(td.get(i).text().equals("户口/国籍：") && td.get(i).nextElementSibling() != null){
                hukou_cnt = td.get(i).nextElementSibling().text();
                hukou = Utils.getCityCodeFromString(hukou_cnt);
                rWrapper.getResume_info().setHukou_cnt(hukou_cnt);
                rWrapper.getResume_info().setHukou(hukou);
            }
            if(td.get(i).text().equals("婚姻状况：") && td.get(i).nextElementSibling() != null){
                marriage_cnt = td.get(i).nextElementSibling().text();
                rWrapper.getResume_info().setMarriage_cnt(marriage_cnt);
            }
            if(td.get(i).text().equals("学历/学位：") && td.get(i).nextElementSibling() != null){
                backgd = td.get(i).nextElementSibling().text();
                rWrapper.getResume_info().setBackgd_cnt(backgd);
                rWrapper.getResume_info().setBackgd(Utils.getBackgdCodeFromString(backgd));
            }
        }


        String[] cityList = live_city.split("-");
        for (String city : cityList) {
            rWrapper.getResume_info().setCur_city_id(Utils.getCityCodeFromString(city));
        }
        rWrapper.getResume_info().setName(name);
        rWrapper.getResume_info().setFst_job_date_cnt(fst_job_date_cnt);
        rWrapper.getResume_info().setFst_job_date(fst_job_date);
        rWrapper.getResume_info().setLst_job_date_cnt(lst_job_date_cnt);
        rWrapper.getResume_info().setLst_job_date(lst_job_date);
        rWrapper.getResume_info().setGender(Utils.getGenderCodeFromString(gender));
        rWrapper.getResume_info().setGender_cnt(gender);
        rWrapper.getResume_info().setBirthday_cnt(birthday);
        rWrapper.getResume_info().setBirthday(birthdaytimestamp);
        rWrapper.getResume_info().setMobilephone(phone);
        rWrapper.getResume_info().setEmail(email);
        rWrapper.getResume_info().setCur_city_cnt(live_city);
        rWrapper.getMeta_info().getResume_tags().setEmail(email);
        rWrapper.getMeta_info().getResume_tags().setName_mobile(name + "+" + phone);
        rWrapper.getMeta_info().getResume_tags().setSrid(resumeId);
    }


    private static void getJobIntention(Document doc) { // 从document中抽取出求职意向
        String city;
        String salary = "";
        String state = "";
        String job;
        String job_nature = "";
        String arrival_time = "";
        String resumeId = "";
        String trade;
        String hope_salary_from = "";
        String hope_salary_to = "";
        String cur_salart_cnt = "";
        String cur_salary_from = "";
        String cur_salary_to = "";
        String self_assessment;
        List<String> city_list = new ArrayList<String>();
        List<String> cityId_list = new ArrayList<String>();
        List<String> job_list = new ArrayList<String>();
        List<String> jobId_list = new ArrayList<String>();
        List<String> trade_cnt_list = new ArrayList<String>();
        List<String> trade_list = new ArrayList<String>();
        Element tag_id = doc.select("td[align = right]").get(1);
        if(tag_id.text().contains("ID:")){
            resumeId = tag_id.text().substring(3);
            rWrapper.getMeta_info().getResume_tags().setSrid(resumeId);
        }
        ResumeWrapper.TDeliver_info deliverInfo = new ResumeWrapper.TDeliver_info();
        deliverInfo.setSrid(resumeId);
        deliverInfo.setSid(2);
        for(int i=0; i<doc.select("td").size(); i++){
            if(doc.select("td").get(i).text().equals("求职状态：")){
                state = doc.select("td").get(i).nextElementSibling().text();
                break;
            }
        }
        Elements jobdiv = doc.select("td");
        for (int m = 0; m < jobdiv.size(); m++) {
            if (jobdiv.get(m).text().equals("求职意向")) {
                Elements jobintention = jobdiv.get(m).parent().nextElementSibling().select("td");
                for(int i=0; i<jobintention.size(); i++){
                    if(jobintention.get(i).text().equals("地点：")){
                        city = jobintention.get(i).nextElementSibling().text().replace("\u00a0"," ");
                        String[] ss = city.split(" ");
                        for (String s : ss) {
                            city_list.add(s);
                            cityId_list.add(Utils.getCityCodeFromString(s).toString());
                        }
                    }
                    if(jobintention.get(i).text().equals("期望薪资：")){
                        salary = jobintention.get(i).nextElementSibling().text();
                    }
                    if(jobintention.get(i).text().equals("行业：")){
                        trade = jobintention.get(i).nextElementSibling().text().replace("\u00a0"," ");
                        String[] trade1 = trade.split(" ");
                        for (String tra : trade1) {
                            trade_cnt_list.add(tra);
                            trade_list.add(Utils.getJobTradeCodeFromString(tra));
                        }
                    }
                    if(jobintention.get(i).text().equals("职能：")){
                        job = jobintention.get(i).nextElementSibling().text().replace("\u00a0"," ");
                        if (job.split(" ").length > 1) {
                            for (int j = 0; j < job.split(" ").length; j++) {
                                job_list.add(job.split(" ")[j]);
                                jobId_list.add(Utils.getJobCodeFromString(job.split(" ")[j]));
                            }
                        } else {
                            job_list.add(job);
                            jobId_list.add(Utils.getJobCodeFromString(job));
                        }
                    }
                    if(jobintention.get(i).text().equals("到岗时间：")){
                        arrival_time = jobintention.get(i).nextElementSibling().text();
                    }
                    if(jobintention.get(i).text().equals("工作类型：")){
                        job_nature = jobintention.get(i).nextElementSibling().text();
                    }
                    if(jobintention.get(i).text().equals("自我评价：")){
                        self_assessment = jobintention.get(i).nextElementSibling().text();
                        ResumeWrapper.TResume_info.TSelf_assessment tSelf_assessment = new ResumeWrapper.TResume_info.TSelf_assessment();
                        tSelf_assessment.setContent_type("自我评价");
                        tSelf_assessment.setContent(self_assessment);
                        rWrapper.getResume_info().getSelf_assessment().add(tSelf_assessment);
                    }
                }
                if(salary.contains("元/年") || salary.contains("年薪")){                 //期望薪资
                    if(salary.contains("-")) {
                        hope_salary_from = String.valueOf(Math.round(Float.parseFloat(GetNumFromString(salary.split("-")[0])) * 10000 / 12));
                        hope_salary_to = String.valueOf(Math.round(Float.parseFloat(GetNumFromString(salary.split("-")[1])) * 10000 / 12));
                    }else if(salary.contains("以下")){
                        hope_salary_from = "";
                        hope_salary_to = "1666";
                    }else if(salary.contains("以上")){
                        hope_salary_from = "83333";
                        hope_salary_to = "";
                    }
                } else if(salary.contains("元/月") || salary.contains("月薪")){
                    if(salary.contains("-")) {
                        hope_salary_from = GetNumFromString(salary.split("-")[0]);
                        hope_salary_to =  GetNumFromString(salary.split("-")[1]);
                    }else if(salary.contains("以下")){
                        hope_salary_from = "";
                        hope_salary_to = "1500";
                    }else if(salary.contains("以上")){
                        hope_salary_from = "100000";
                        hope_salary_to = "";
                    }
                }
                Elements tag_plate1 = doc.select("td[width = 682]");
                for(int j=0; j<tag_plate1.size(); j++){
                    if(tag_plate1.get(j).text().contains("目前年收入")){
                        cur_salart_cnt = "目前年收入" + tag_plate1.get(j).child(0).text().replace("\u00a0","");
                        cur_salary_from = String.valueOf(Math.round(Float.parseFloat(GetNumFromString(cur_salart_cnt)) * 10000 / 12));
                        cur_salary_to = "";
                        break;
                    }
                }
                ResumeWrapper.TDeliver_info.TJob_intension jobIntension = new ResumeWrapper.TDeliver_info.TJob_intension();
                jobIntension.setCity_cnt(city_list);
                jobIntension.setCity(cityId_list);
                jobIntension.setArrival_time(arrival_time);
                jobIntension.setJob_nature_cnt(job_nature);
                jobIntension.setJob_nature(Utils.getJobNatureCodeFromString(job_nature));
                jobIntension.setJob_cnt(job_list);
                jobIntension.setJob(jobId_list);
                jobIntension.setState_cnt(state);
                jobIntension.setTrade(trade_list);
                jobIntension.setHope_salary_from(hope_salary_from);
                jobIntension.setHope_salary_to(hope_salary_to);
                jobIntension.setHope_salary_cnt(salary);
                jobIntension.setCur_salary_cnt(cur_salart_cnt);
                jobIntension.setCur_salary_from(cur_salary_from);
                jobIntension.setCur_salary_to(cur_salary_to);
                jobIntension.setTrade_cnt(trade_cnt_list);
                deliverInfo.setJob_intension(jobIntension);
                break;
            }
        }
        rWrapper.getDeliver_info().add(deliverInfo);
    }

    private static void getWorkExperience(Document doc) throws ParseException { // 从document中抽取出工作经历
        String stime;
        String etime;
        long stimestamp;
        long etimestamp;
        String time_cnt;   // 工作时间原文
        String company;
        String company_type;
        String company_size_cnt;
        String location = "";
        String department; // 部门
        String trade;
        String job;
        String job_description ;
        String report_to = ""; // 汇报对象
        String work_content;
        Elements workexper1 = doc.select("td");
        for (int k = 0; k < workexper1.size(); k++) {
            if (workexper1.get(k).text().equals("工作经验")) {
                Elements workexper = workexper1.get(k).parent().nextElementSibling().select("tbody").get(0).children();
                int tr_num = workexper.size();
                int work_num = tr_num;
                rWrapper.getMeta_info().setWorks(work_num);
                for (int j = 0; j < tr_num; j++) {
                    time_cnt = "";
                    stime = "";
                    etime = "";
                    stimestamp = 0;
                    etimestamp = 0;
                    company = "";
                    company_type = "";
                    company_size_cnt = "";
                    job = "";
                    job_description = "";
                    trade = "";
                    department = "";
                    Elements work_rows = workexper.get(j).select("tbody").get(0).children();
                    for(int i=0; i<work_rows.size(); i++){
                        if(i == 0){
                            time_cnt = work_rows.get(i).child(0).text();
                            stime = time_cnt.split("-")[0];
                            etime = time_cnt.split("-")[1];
                            stimestamp = TransferStringToTimeStamp.transferStringToTimeStamp(stime);
                            etimestamp = TransferStringToTimeStamp.transferStringToTimeStamp(etime);
                            job = work_rows.get(i).child(1).child(0).text();
                            if(work_rows.get(i).child(1).children().size()>1){
                                department = work_rows.get(i).child(1).child(1).text();
                            }
                        }
                        if(i == 1){
                            company = work_rows.get(i).child(0).child(0).text();
                        }
                        if(i == 2 ){
                            if(work_rows.get(i).text().contains("工作描述：")){
                                job_description = work_rows.get(i).text().replace("\u00a0","").substring(5);
                            }else{
                                String [] info = work_rows.get(i).child(0).text().replace("\u00a0", "").split("\\|");
                                trade = info[0];
                                if(info.length>1){
                                    company_size_cnt = info[1];
                                }
                                if(info.length>2) {
                                    company_type = info[2];
                                }
                            }
                        }
                        if(i == 3){
                            if(work_rows.get(i).text().contains("工作描述：")){
                                job_description = work_rows.get(i).text().replace("\u00a0","").substring(5);
                            }else{
                                job_description = "";
                            }
                        }
                    }
                    if(j == 0){
                        lst_job_date_cnt = etime;
                        lst_job_date = etimestamp;
                    }
                    if(j == tr_num - 1){
                        fst_job_date_cnt = stime;
                        fst_job_date = stimestamp;
                    }

                    work_content = workexper.get(j).text();
                    ResumeWrapper.TResume_info.TWork tWork = new ResumeWrapper.TResume_info.TWork();
                    tWork.setStime(stimestamp);
                    tWork.setEtime(etimestamp);
                    tWork.setTime_cnt(time_cnt);
                    tWork.setCompany(company);
                    tWork.setCompany_type_cnt(company_type);
                    tWork.setCompany_size_cnt(company_size_cnt);
                    tWork.setLocation(location);
                    tWork.setDepartment(department);
                    tWork.setTrade_cnt(trade);
                    tWork.setTrade(Utils.getJobTradeCodeFromString(trade));
                    tWork.setJob(job);
                    tWork.setJob_description(job_description);
                    tWork.setReport_to(report_to);
                    rWrapper.getResume_info().getWork().add(tWork);
                    ResumeWrapper.TResume_info.TWork_cnt tWork_cnt = new ResumeWrapper.TResume_info.TWork_cnt();
                    tWork_cnt.setContent(work_content);
                    rWrapper.getResume_info().getWork_cnt().add(tWork_cnt);
                }
                break;
            }
        }
    }

    private static void getEducationExperience(Document doc) throws ParseException { // 从document中抽取出教育经历
        String stime;
        String etime;
        long stimestamp;
        long etimestamp;
        String time_cnt;
        String school;
        String speciality;
        String degree_cnt;
        String description;
        String education_cnt;
        Elements td = doc.select("td");
        for (int i = 0; i < td.size(); i++) {
            if (td.get(i).text().equals("教育经历")) {
                Elements educontent = td.get(i).parent().nextElementSibling().select("tbody").get(0).children();
                for (int j = 0; j < educontent.size(); j++) {
                    ResumeWrapper.TResume_info.TEducation tEducation = new ResumeWrapper.TResume_info.TEducation();
                    time_cnt = educontent.get(j).select("tbody").get(0).child(0).child(0).text();
                    stime = time_cnt.split("-")[0];
                    etime = time_cnt.split("-")[1];
                    stimestamp = TransferStringToTimeStamp.transferStringToTimeStamp(stime);
                    etimestamp = TransferStringToTimeStamp.transferStringToTimeStamp(etime);
                    if(educontent.get(j).select("tbody").get(0).child(0).children().size()>1){
                        school = educontent.get(j).select("tbody").get(0).child(0).child(1).text();
                    }else{
                        school = "";
                    }
                    if(educontent.get(j).select("tbody").get(0).children().size()>1) {
                        String[] deg_spec = educontent.get(j).select("tbody").get(0).child(1).text().replace("\u00a0", " ").split("\\|");
                        degree_cnt = deg_spec[0];
                        if (deg_spec.length > 1) {
                            speciality = deg_spec[1];
                        } else {
                            speciality = "";
                        }
                    }else{
                        degree_cnt = "";
                        speciality = "";
                    }
//                    speciality = educontent.get(j).select("tbody").get(0).child(1).text().replace("\u00a0"," ").split("\\|")[1];

                    tEducation.setTime_cnt(time_cnt);
                    tEducation.setStime(stimestamp);
                    tEducation.setEtime(etimestamp);
                    tEducation.setSchool(school);
                    tEducation.setBackgd_cnt(degree_cnt);
                    tEducation.setSpeciality(speciality);
                    tEducation.setBackgd(Utils.getBackgdCodeFromString(degree_cnt).toString());
                    rWrapper.getResume_info().getEducation().add(tEducation);
                }
                education_cnt = td.get(i).parent().nextElementSibling().text();
                rWrapper.getResume_info().setEducation_cnt(education_cnt);
                break;
            }
        }
    }


    private static void getProjectExperience(Document doc) throws ParseException {           //抽取出项目经历
        String stime;
        String etime;
        long stimestamp;
        long etimestamp;
        String time_cnt;
        String project_name;    //项目名字
        String description;   //项目描述
        String duty;      //职责描述
        String dev_tools;  //开发工具
        String env_software; //软件环境
        String env_hardware;   //硬件环境
        String project_cnt;
        String row1;
        int project_num = 0;
        Elements td = doc.select("td");
        for (int i = 0; i < td.size(); i++) {
            if (td.get(i).text().equals("项目经验") && td.get(i).parent().nextElementSibling().select("tbody").size() > 0) {
                Elements projectexp = td.get(i).parent().nextElementSibling().select("tbody").get(0).children();
                for (int j = 0; j < projectexp.size(); j++) {
                    ResumeWrapper.TResume_info.TProjects tProjects = new ResumeWrapper.TResume_info.TProjects();
                    time_cnt = projectexp.get(j).select("tbody").get(0).child(0).child(0).text();
                    stime = time_cnt.split("-")[0];
                    etime = time_cnt.split("-")[1];
                    stimestamp = TransferStringToTimeStamp.transferStringToTimeStamp(stime);
                    etimestamp = TransferStringToTimeStamp.transferStringToTimeStamp(etime);
                    project_name = projectexp.get(j).select("tbody").get(0).child(0).child(1).text();
                    Elements tag_key = projectexp.get(j).select("td");
                    for (int k = 0; k < tag_key.size(); k++) {
                        if (tag_key.get(k).text().equals("项目描述：")) {
                            description = tag_key.get(k).nextElementSibling().text();
                            tProjects.setDescription(description);
                        }
                        if (tag_key.get(k).text().equals("责任描述：")) {
                            duty = tag_key.get(k).nextElementSibling().text();
                            tProjects.setDuty(duty);
                        }

                    }
                    project_cnt = projectexp.get(j).text();
                    tProjects.setStime(stimestamp);
                    tProjects.setEtime(etimestamp);
                    tProjects.setTime_cnt(time_cnt);
                    tProjects.setProject_name(project_name);
                    rWrapper.getResume_info().getProjects().add(tProjects);
                    ResumeWrapper.TResume_info.TProjects_cnt tProjects_cnt = new ResumeWrapper.TResume_info.TProjects_cnt();
                    tProjects_cnt.setContent(project_cnt);
                    rWrapper.getResume_info().getProjects_cnt().add(tProjects_cnt);
                    project_num += 1;
                }
                rWrapper.getMeta_info().setProjects(project_num);
                break;
            }
        }
    }

    private static void getTrainingExperience(Document doc) throws ParseException{
        long stimestamp;
        long etimestamp;
        String time_cnt;
        String agency;    //机构名字
        String cer_name;   //证书名字
        String course;    //课程名字
        String description;
        String address;
        String training_cnt;
        Elements td = doc.select("td");
        for(int i=0;i < td.size();i++){
            if (td.get(i).text().equals("培训经历")) {
                Element train_tbody = td.get(i).parent().parent();
                training_cnt = train_tbody.text().substring(5);
                rWrapper.getResume_info().setTraining_cnt(training_cnt);
                int train_num = train_tbody.children().size() - 1;
                for(int j=1; j<=train_num; j++){
                    agency = "";
                    address = "";
                    description = "";
                    time_cnt = train_tbody.child(j).select("tbody").get(0).child(0).child(0).text();
                    stimestamp = TransferStringToTimeStamp.transferStringToTimeStamp(time_cnt.split("--")[0]);
                    etimestamp = TransferStringToTimeStamp.transferStringToTimeStamp(time_cnt.split("--")[1]);
                    course = train_tbody.child(j).select("tbody").get(0).child(0).child(1).text();
                    Elements tag_keys = train_tbody.child(j).select("tbody").get(1).select("td");
                    for(int k=0; k<tag_keys.size(); k++){
                        if(tag_keys.get(k).text().equals("培训机构：") && tag_keys.get(k).nextElementSibling() != null){
                            agency = tag_keys.get(k).nextElementSibling().text();
                        }
                        if(tag_keys.get(k).text().equals("培训地点：") && tag_keys.get(k).nextElementSibling() != null){
                            address = tag_keys.get(k).nextElementSibling().text();
                        }
                        if(tag_keys.get(k).text().equals("培训描述：") && tag_keys.get(k).nextElementSibling() != null){
                            description = tag_keys.get(k).nextElementSibling().text();
                        }
                    }
                    ResumeWrapper.TResume_info.TTraining tTraining = new ResumeWrapper.TResume_info.TTraining();
                    tTraining.setTime_cnt(time_cnt);
                    tTraining.setStime(stimestamp);
                    tTraining.setEtime(etimestamp);
                    tTraining.setAddress(address);
                    tTraining.setAgency(agency);
                    tTraining.setCourse(course);
                    tTraining.setDescription(description);
                    rWrapper.getResume_info().getTrainings().add(tTraining);
                }
                break;
            }
        }
    }

    private static void getLanguageSkill(Document doc) throws ParseException {
        String language_cnt;
        String lang_cnt;
        String verbal = ""; //听说能力
        String verbal_cnt;
        String literacy = ""; //读写能力
        String literacy_cnt;
        String all_level = "";
        String lang_level = "";
        Elements td = doc.select("td");
        for (int i = 0; i < td.size(); i++) {
            if (td.get(i).text().equals("技能/语言")) {
                String language_content = "";
                Elements skill_tbody = td.get(i).parent().nextElementSibling().select("strong");
                int skill_num = skill_tbody.size();
                for(int j=0; j<skill_num; j++){
                    lang_cnt = skill_tbody.get(j).text();
                    if(lang_cnt.contains("语") || lang_cnt.contains("普通话")){
                        ResumeWrapper.TResume_info.TLanguage tLanguage = new ResumeWrapper.TResume_info.TLanguage();
                        all_level = skill_tbody.get(j).parent().nextElementSibling().text();
                        tLanguage.setLang_cnt(lang_cnt);
                        tLanguage.setAll_level(all_level);
                        rWrapper.getResume_info().getLanguage().add(tLanguage);
                        language_content += lang_cnt + " " + all_level + " ";
                    }
                }
                rWrapper.getResume_info().setLanguage_cnt(language_content);
                break;
            }
        }
    }

    private static void getCertificate(Document doc) throws ParseException {
        String cer_name;
        String issued ;
        String description;
        String certification_cnt;
        Elements td = doc.select("td");
        for (int i = 0; i < td.size(); i++) {
            if (td.get(i).text().equals("证书")) {
                Elements cer_tbody = td.get(i).parent().nextElementSibling().select("tbody").get(0).children();
                certification_cnt = cer_tbody.text();
                rWrapper.getResume_info().setCertification_cnt(certification_cnt);
                int cer_num = cer_tbody.size();
                for(int j=0; j<cer_num; j++){
                    issued = cer_tbody.get(j).child(0).text();
                    cer_name = cer_tbody.get(j).child(1).text();
                    ResumeWrapper.TResume_info.TCertification tCertification = new ResumeWrapper.TResume_info.TCertification();
                    tCertification.setIssued(issued);
                    tCertification.setCer_name(cer_name);
                    rWrapper.getResume_info().getCertification().add(tCertification);
                }
                break;
            }
        }
    }

    public boolean parse(String filePath, ResumeWrapper resume) {
        try {
            String htmlContent = org.emailresume.common.Utils.readFileByBytes(filePath);
            rWrapper = resume;
            Document doc = Jsoup.parse(htmlContent);
            parseHtml(doc);
            if(rWrapper.getResume_info().getWork().isEmpty() || rWrapper.getResume_info().getEducation().isEmpty()) {
                if (rWrapper.getResume_info().getWork().isEmpty() && rWrapper.getResume_info().getEducation().isEmpty()) {
                    String server_ip = org.emailresume.common.Utils.getIP();
                    // 如果工作和教育都没有解析出来，则将该简历信息插入数据库
//                    InsertDataToDB.insertDataToDB(server_ip, filePath, "2");
                    logger.error("file error: " + filePath);
                    return false;
                }else{
                    logger.warn("该简历缺少工作或教育字段：" + filePath);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    private static void parseHtml(Document doc) throws ParseException {

        // 获取求职意向
        getJobIntention(doc);

        // 获取工作经历
        getWorkExperience(doc);

        // 获得教育经历
        getEducationExperience(doc);

        // 获取简历信息
        getResumeInfo(doc);

        // 获取项目经历
        getProjectExperience(doc);

        //获取语言能力
        getLanguageSkill(doc);

        // 获取证书内容
        getCertificate(doc);

        // 获取培训经历
        getTrainingExperience(doc);

    }

}
