package org.emailresume.htmlparser;

import org.htmlcleaner.*;

import java.util.*;
import org.apache.commons.lang.StringEscapeUtils;

public class ZhiLianParser  implements Parser{
    final static Integer m_sid = 1;
    final static String m_idXpath = "/body/span";

    final static String m_selfAssessmentXpath = "//span[text()='自我评价']";
    final static String m_jobIntentionXPath = "//span[text()='求职意向']";
    final static String m_alinkXpath = "//a[text()='我要联系TA']";

    final static String m_workXpath = "//span[text()='工作经历']";
    final static String m_educationXpath = "//span[text()='教育经历']";
    public  boolean parse(String htmlContent, ResumeWrapper resume){
        boolean parseResult = true;
        try {
            HtmlCleaner cleaner = new HtmlCleaner();
            CleanerProperties props = cleaner.getProperties();
            props.setTransSpecialEntitiesToNCR(true);
            props.setUseCdataForScriptAndStyle(true);
            props.setRecognizeUnicodeChars(true);
            props.setUseEmptyElementTags(true);
            props.setAdvancedXmlEscape(true);
            props.setTranslateSpecialEntities(true);
            props.setBooleanAttributeValues("empty");

            TagNode htmlNode = cleaner.clean(htmlContent);

            Object[] ns = htmlNode.evaluateXPath(m_alinkXpath);
            TagNode n = (TagNode) ns[0];
            String url = n.getAttributeByName("href");
            url = url.substring(url.indexOf("url") + 4);
            String contactResult = org.emailresume.common.HttpRequest.sendGet(url, "");
            TagNode contactHtmlNode = cleaner.clean(contactResult);
            ns = contactHtmlNode.evaluateXPath("/body/div/div/p[2]/span/a");
            String phone = ((TagNode)ns[0]).getText().toString().trim();
            ns = contactHtmlNode.evaluateXPath("/body/div/div/p[3]/span/a");
            String email = ((TagNode)ns[0]).getText().toString().trim();

            ResumeWrapper.TResume_info resumeInfo = resume.getResume_info();
            resumeInfo.setMobilephone(phone);
            resumeInfo.setEmail(email);

            //简历ID
            ns = htmlNode.evaluateXPath(m_idXpath);
            n = (TagNode) ns[0];
            String srid = n.getText().toString().trim().substring(3);

            //
            resume.setCreate_time(Utils.getCurrentTimestamp());

            //基本信息，姓名，手机等
            ns = htmlNode.evaluateXPath("//div[@class='photo']");
            n = (TagNode) ns[0];
            n = n.getParent().getParent();

            ns = n.evaluateXPath("/td/table/tbody");
            n = (TagNode) ns[0];

            List<TagNode> childList = n.getChildTagList();
            resumeInfo.setName(childList.get(0).getText().toString().trim());
            TagNode baseInfoNode = childList.get(1);
            childList.clear();
            List<? extends BaseToken> ls = baseInfoNode.getChildTagList().get(0).getAllChildren();
            for(BaseToken token : ls){
                if(token instanceof TagNode){
                    TagNode node = (TagNode)token;
                    if(node.getName().equals("font")){
                        String value = node.getText().toString().trim();
                        if(value.equals("男") || value.equals("女")){
                            resumeInfo.setGender_cnt(value);
                            resumeInfo.setGender(Utils.getGenderCodeFromString(value));
                        }else if(value.contains("年") && value.contains("月")){
                            resumeInfo.setBirthday_cnt (value);
                            resumeInfo.setBirthday(Utils.parseTime(value, "yyyy年MM月"));
                        }
                    }
                }else if(token instanceof ContentNode){
                    ContentNode node = (ContentNode) token;
                    String value = node.getContent().toString().trim();
                    if(value.contains("现")){
                        //现居住地
                        value = value.substring(4);
                        resumeInfo.setCur_city_cnt(value);
                        if(value.contains(" ")){
                            resumeInfo.setCur_city_id(Utils.getCityCodeFromString(resumeInfo.getCur_city_cnt().split(" ")[1]));
                        }else if(value.contains("-")){
                            resumeInfo.setCur_city_id(Utils.getCityCodeFromString(resumeInfo.getCur_city_cnt().split("-")[1]));
                        } else{
                            resumeInfo.setCur_city_id(Utils.getCityCodeFromString(value));
                        }
                    }else if(value.endsWith("户口")){
                        //户口
                        value = value.substring(0, value.length() - 2);
                        resumeInfo.setHukou_cnt(value);
                        if(value.contains("-")){
                            resumeInfo.setHukou(Utils.getCityCodeFromString(resumeInfo.getHukou_cnt().split("-")[1]));
                        }else{
                            resumeInfo.setHukou(Utils.getCityCodeFromString(value));
                        }
                    }
                }
            }


            resume.setResume_info(resumeInfo);

            ns = htmlNode.evaluateXPath(m_selfAssessmentXpath);
            if(ns.length == 0){
                System.err.println("没有自我评价");
                org.emailresume.common.Utils.writeFile(htmlContent, "G:/NoSelf/" + new Date().getTime() + "resume.html");
            }else{
                String selfAssessment = ((TagNode)ns[0]).getParent().getParent().getParent().getParent().getParent().getChildTagList().get(1).getText().toString().trim();
                List<ResumeWrapper.TResume_info.TSelf_assessment> self_assessments = new ArrayList<ResumeWrapper.TResume_info.TSelf_assessment>();
                ResumeWrapper.TResume_info.TSelf_assessment tSelfAssessment = new ResumeWrapper.TResume_info.TSelf_assessment();
                tSelfAssessment.setContent(selfAssessment);
                tSelfAssessment.setContent_type("自我评价");
                resumeInfo.setSelf_assessment(self_assessments);
            }

            //投递信息
            ns = htmlNode.evaluateXPath(m_jobIntentionXPath);
            if(ns.length == 0){
                System.err.println("没有求职意向");
                org.emailresume.common.Utils.writeFile(htmlContent, "G:/JobIn/" + new Date().getTime() + "resume.html");
            }else{
                n = ((TagNode)ns[0]).getParent().getParent().getParent().getParent().getParent().getChildTagList().get(3).getChildTagList().get(0);
                childList.clear();
                childList = n.getChildTagList();
                String jobCity = childList.get(0).getChildTagList().get(1).getText().toString();
                String jobNature = childList.get(1).getChildTagList().get(1).getText().toString();
                String job = childList.get(2).getChildTagList().get(1).getText().toString();
                List<String> jobCntList = new ArrayList<String>();
                List<String> jobCodeList = new ArrayList<String>();
                String[] newstr = job.split("、");
                for(int i =0;i<newstr.length;i++){
                    jobCntList.add(newstr[i]);
                    jobCodeList.add(Utils.getJobCodeFromString(newstr[i]));
                }
                String jobSalary = childList.get(3).getChildTagList().get(1).getText().toString();
                String jobState = childList.get(4).getChildTagList().get(1).getText().toString();
                String jobTrade = childList.get(5).getChildTagList().get(1).getText().toString();
                List<String> jobTradeCntList = new ArrayList<String>();
                List<String> jobTradeCodeList = new ArrayList<String>();
                newstr = jobTrade.split("、");
                for(int i =0;i<newstr.length;i++){
                    jobTradeCntList.add(newstr[i]);
                    jobTradeCodeList.add(Utils.getJobTradeCodeFromString(newstr[i]));
                }

                ResumeWrapper.TDeliver_info deliverInfo = new ResumeWrapper.TDeliver_info();
                deliverInfo.setSrid(srid);
                deliverInfo.setSid(m_sid);
                ResumeWrapper.TDeliver_info.TJob_intension jobIntension = new ResumeWrapper.TDeliver_info.TJob_intension();
                jobIntension.setState_cnt(jobState);
                jobIntension.setJob_nature(Utils.getJobNatureCodeFromString(jobNature));
                jobIntension.setJob_nature_cnt(jobNature);
                List<String> cityCnts = new ArrayList<String>();
                cityCnts.add(jobCity);
                Integer cityCode = Utils.getCityCodeFromString(jobCity);
                List<String> cities = new ArrayList<String>();
                cities.add(cityCode.toString());
                jobIntension.setCity(cities);
                jobIntension.setCity_cnt(cityCnts);

                jobIntension.setJob(jobCodeList);
                jobIntension.setJob_cnt(jobCntList);

                jobIntension.setHope_salary_cnt(jobSalary);

                jobIntension.setTrade(jobTradeCodeList);
                jobIntension.setTrade_cnt(jobTradeCntList);

                deliverInfo.setJob_intension(jobIntension);

                resume.getDeliver_info().add(deliverInfo);
            }


            //工作经历
            String firstJobTime = "";
            Long firstJobTimestamp = new Long(0);
            String lastJobTime = "";
            Long lastJobTimestamp = new Long(0);
            ns = htmlNode.evaluateXPath(m_workXpath);
            if(ns.length == 0){
                System.err.println("没有工作经历");
                //org.emailresume.common.Utils.writeFile(htmlContent, "G:/NoWork/" + new Date().getTime() + "resume.html");
            }else{
                List<ResumeWrapper.TResume_info.TWork> works = resumeInfo.getWork();
                List<ResumeWrapper.TResume_info.TWork_cnt> workCnts = resumeInfo.getWork_cnt();
                n = (TagNode)ns[0];
                n = n.getParent().getParent().getParent().getParent().getParent().getChildTagList().get(3).getChildTagList().get(0);

                childList.clear();
                childList = n.getChildTagList();
                for(TagNode node : childList){
                    ns = node.evaluateXPath("/td/table/tbody/tr[1]");
                    n = (TagNode)ns[0];
                    String workContent = n.getText().toString().replaceAll(" ", "").trim();
                    String[] time = n.getChildTagList().get(0).getText().toString().split("-");
                    String stime = time[0].trim();
                    String etime = time[1].trim();
                    String company = n.getChildTagList().get(1).getChildTagList().get(0).getText().toString().trim();

                    ns = node.evaluateXPath("/td/table/tbody/tr[2]");
                    n = (TagNode)ns[0];
                    workContent += " ";
                    workContent += n.getText().toString().replaceAll(" ", "").trim();
                    n = n.getChildTagList().get(1);
                    String jobOfWork = n.getChildTagList().get(0).getText().toString().trim();
                    String salaryOfWork = n.getChildTagList().get(2).getText().toString().trim();

                    ns = node.evaluateXPath("/td/table/tbody/tr[3]");
                    n = (TagNode)ns[0];
                    workContent += " ";
                    workContent += n.getText().toString().replaceAll(" ", "").trim();
                    n = n.getChildTagList().get(1);
                    String tradeCntOfWork = n.getChildTagList().get(0).getText().toString();
                    //String companyTypeCntOfWork = n.getChildTagList().get(2).getText().toString().split("：")[1].trim();
                    //String companySizeCntOfWork = n.getChildTagList().get(4).getText().toString().split("：")[1].trim();

                    ns = node.evaluateXPath("/td/table/tbody/tr[4]");
                    n = (TagNode)ns[0];
                    workContent += " ";
                    workContent += n.getText().toString().replaceAll(" ", "").trim();
                    String jobDescriptionXpath = "/td[2]/p/text()";
                    ns = n.evaluateXPath(jobDescriptionXpath);
                    String jobDescriptionOfWork = ns[0].toString().substring(5).trim();

                    ResumeWrapper.TResume_info.TWork work = new ResumeWrapper.TResume_info.TWork();
                    work.setCompany(company);
                    work.setStime(Utils.parseZhiLianTime(stime));
                    work.setEtime(Utils.parseZhiLianTime(etime));
                    if(firstJobTimestamp == 0){
                        firstJobTime = stime;
                        firstJobTimestamp = work.getStime();
                    }else{
                        if(work.getStime() < firstJobTimestamp){
                            firstJobTime = stime;
                            firstJobTimestamp = work.getStime();
                        }
                    }
                    if(lastJobTimestamp == 0){
                        lastJobTime = etime;
                        lastJobTimestamp = work.getEtime();
                    }else{
                        if(work.getEtime() > lastJobTimestamp){
                            lastJobTime = etime;
                            lastJobTimestamp = work.getEtime();
                        }
                    }

                    work.setJob_description(jobDescriptionOfWork);
                    work.setJob(jobOfWork);
                    work.setTrade(Utils.getJobTradeCodeFromString(tradeCntOfWork));
                    work.setTrade_cnt(tradeCntOfWork);
                    //work.setCompany_type_cnt(companyTypeCntOfWork);
                    //work.setCompany_size_cnt(companySizeCntOfWork);
                    work.setTime_cnt(stime + " - " + etime);
                    works.add(work);

                    ResumeWrapper.TResume_info.TWork_cnt workCnt = new ResumeWrapper.TResume_info.TWork_cnt();
                    workCnt.setContent(workContent);
                    workCnts.add(workCnt);
                }
            }
            resumeInfo.setFst_job_date(firstJobTimestamp);
            resumeInfo.setFst_job_date_cnt(firstJobTime);
            resumeInfo.setLst_job_date(lastJobTimestamp);
            resumeInfo.setLst_job_date_cnt(lastJobTime);

            //教育经历
            ns = htmlNode.evaluateXPath(m_educationXpath);
            if(ns.length == 0){
                System.err.println("没有教育经历");
                //org.emailresume.common.Utils.writeFile(htmlContent, "G:/NoEdu/" + new Date().getTime() + "resume.html");
            }else {
                List<ResumeWrapper.TResume_info.TEducation> educations = resumeInfo.getEducation();
                n = (TagNode)ns[0];
                n = n.getParent().getParent().getParent().getParent().getParent().getChildTagList().get(3).getChildTagList().get(0);

                childList.clear();
                childList = n.getChildTagList();
                for(TagNode node : childList){
                    ns = node.evaluateXPath("/td/table/tbody/tr[1]");
                    n = (TagNode)ns[0];
                    String[] time = n.getChildTagList().get(0).getText().toString().split("-");
                    String stime = time[0].trim();
                    String etime = time[1].trim();

                    TagNode infoNode = n.getChildTagList().get(1);
                    List<TagNode> infoList = infoNode.getChildTagList();
                    String school = StringEscapeUtils.unescapeHtml(infoList.get(0).getText().toString()).trim();
                    String speciality = StringEscapeUtils.unescapeHtml(infoList.get(1).getText().toString()).trim();

                    String backgdCnt = StringEscapeUtils.unescapeHtml(infoList.get(infoList.size() - 1).getText().toString()).trim();

                    ResumeWrapper.TResume_info.TEducation education = new ResumeWrapper.TResume_info.TEducation();
                    education.setStime(Utils.parseZhiLianTime(stime));
                    education.setEtime(Utils.parseZhiLianTime(etime));
                    education.setTime_cnt(stime + " - " + etime);
                    education.setBackgd(Utils.getBackgdCodeFromString(backgdCnt).toString());
                    education.setBackgd_cnt(backgdCnt);
                    education.setSchool(school);
                    education.setSpeciality(speciality);

                    educations.add(education);
                }
            }


        }catch (Exception e){
            parseResult = false;
            e.printStackTrace();
            org.emailresume.common.MyLogger.getInstance().writeWarning(org.emailresume.common.Utils.getExceptionString(e));
        }

        return parseResult;
    }
}
